{"version":3,"sources":["api.js","List.js","App.js","serviceWorker.js","index.js"],"names":["LeaderboardApi","process","this","baseURL","apiBaseUrl","results","url","axios","get","then","res","parseResponse","data","filter","value","index","sorted","IssuesCreated","sort","a","b","UserList","props","state","leaderboardApi","fetch","setState","id","style","map","item","UserLogin","key","toString","class","color","rel","target","href","React","Component","App","className","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"uJAEMA,E,WACJ,aAAe,oBAETC,GAAWA,wHAIbC,KAAKC,QAAU,2BACfD,KAAKE,WAAa,GAEpBF,KAAKG,QAAU,G,oDAGR,IAAD,OAEAC,EAAG,UAAMJ,KAAKC,SAAX,OAAqBD,KAAKE,WAA1B,gBAET,OAAOG,IACJC,IAAIF,GACJG,MAAK,SAAAC,GAAG,OAAI,EAAKC,cAAcD,MAC/BD,MAAK,SAAAG,GACJ,EAAKP,QAAUO,O,uCAII,IAATA,EAAQ,EAARA,KACd,OAAGA,EACcA,EAAKC,QAAO,SAACC,EAAOC,EAAOC,GACxC,OAAOF,EAAMG,iBAGOC,MAAK,SAACC,EAAEC,GAC5B,OAAGD,EAAEF,cAAeG,EAAEH,eACZ,EACAG,EAAEH,cAAeE,EAAEF,cACpB,EAEF,KAKJ,O,KAMIjB,Q,iOCjBAqB,EA9Bf,YACI,WAAYC,GAAQ,IAAD,8BACf,4CAAMA,KACDC,MAAQ,CACTC,eAAgB,IAAIxB,IACpBK,QAAS,IAJE,EADvB,iFASyB,IAAD,OAChBH,KAAKqB,MAAMC,eAAeC,QAAQhB,MAAK,WACnC,EAAKiB,SAAS,CAACrB,QAAS,EAAKkB,MAAMC,eAAenB,eAX9D,+BAgBQ,OACI,yBAAKsB,GAAG,SACJ,wBAAIA,GAAG,aAAaC,MAAO,CAAC,kBAAmB,SAC1C1B,KAAKqB,MAAMlB,QAAQwB,KAAI,SAACC,EAAMf,GAAP,OAGxB,wBAAIY,GAAIG,EAAKC,UAAU,QAASC,IAAKjB,EAAMkB,YACrCH,EAAKb,cADX,MAC6B,uBAAGU,GAAIG,EAAKC,UAAU,QAASG,MAAOJ,EAAKb,cAAgB,GAAK,MAAQ,UAAWW,MAAO,CAACO,MAAO,SAAUC,IAAI,sBAAsBC,OAAO,SAASC,KAAM,sBAAwBR,EAAKC,WAAYD,EAAKC,qBAvB3P,GAA8BQ,IAAMC,W,MCmBrBC,MAlBf,WACE,OACE,yBAAKC,UAAU,OACb,yHACyF,uBAAGJ,KAAK,oDAAR,6CAEzF,6BACE,4DAAiC,uBAAGA,KAAK,wEAAR,wBAAjC,OAA4I,uBAAGA,KAAK,gDAAR,iDAC5I,mDAAwB,uBAAGA,KAAK,kDAAR,kBAAxB,6BAEF,4BAAQI,UAAU,cAChB,8DACA,kBAAC,EAAD,SCJYC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB7C,MAAK,SAAA8C,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.3d21ad03.chunk.js","sourcesContent":["import axios from 'axios';\n\nclass LeaderboardApi {\n  constructor() {\n\n    if (process && process.env && process.env.NODE_ENV === 'development') {\n      this.baseURL = 'http://localhost:3000';\n      this.apiBaseUrl = '';\n    } else {\n      this.baseURL = \"https://alexellis.o6s.io\";\n      this.apiBaseUrl = \"\";\n    }\n    this.results = [];\n  }\n\n  fetch() {\n\n    const url = `${this.baseURL}${this.apiBaseUrl}/leaderboard`;\n\n    return axios\n      .get(url)\n      .then(res => this.parseResponse(res))\n      .then(data => {\n        this.results = data;\n      });\n  }\n\n  parseResponse({ data }) {\n    if(data) {\n      let filtered = data.filter((value, index, sorted) => {\n        return value.IssuesCreated\n      })\n\n      let sorted = filtered.sort((a,b)=>{\n        if(a.IssuesCreated> b.IssuesCreated) {\n          return -1\n        } else if(b.IssuesCreated> a.IssuesCreated) {\n          return 1\n        }\n        return 0\n      })\n\n      return sorted\n    }\n    return [];\n  }\n}\n\n// export const leaderboardApi = new LeaderboardApi();\n\nexport default LeaderboardApi;","import React from 'react';\nimport LeaderboardApi from \"./api.js\"\n\nexport class UserList extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            leaderboardApi: new LeaderboardApi(),\n            results: []\n        }\n    }\n\n    componentDidMount() {\n        this.state.leaderboardApi.fetch().then(()=>{\n            this.setState({results: this.state.leaderboardApi.results})\n        })\n    }\n\n    render() {\n        return (\n            <div id=\"links\">\n                <ul id=\"links-list\" style={{'list-style-type': 'none'}}>\n                    {this.state.results.map((item, index) => (\n                    \n\n                    <li id={item.UserLogin+'-item'} key={index.toString()}>\n                        { item.IssuesCreated } - <a id={item.UserLogin+'-link'} class={item.IssuesCreated > 10 ? \"hot\" : \"regular\"} style={{color: 'white'}} rel=\"noopener noreferrer\" target=\"_blank\" href={'https://github.com/' + item.UserLogin}>{item.UserLogin}</a></li>\n                    ))}\n            </ul>\n          </div>\n        )\n    }\n}\nexport default UserList;\n","import React from 'react';\nimport UserList from './List.js'\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <div>\n      Where is this code hosted? On GitHub pages, as a React.js website, statically generated: <a href=\"https://github.com/alexellis/alexellis.github.io\">github.com/alexellis/alexellis.github.io</a>\n      </div>\n      <div>\n        <p>Where is the API sourced? The <a href=\"https://github.com/alexellis/leaderboard-app/tree/master/leaderboard\">Leaderboard function</a> in <a href=\"https://github.com/alexellis/leaderboard-app\">https://github.com/alexellis/leaderboard-app</a></p>\n        <p>The API is hosted on <a href=\"https://github.com/openfaas/community-cluster/\">OpenFaaS Cloud</a> and uses a CORS header.</p>\n      </div>\n      <header className=\"App-header\">\n        <h2>Who's created the most issues?</h2>\n        <UserList></UserList>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}